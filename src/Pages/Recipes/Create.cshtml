@page
@model CreateModel
@{
    ViewData["Title"] = "Create Recipe";
}

<style>
    body {
        font-family: 'Nunito', sans-serif;
    }

    h1, h2 {
        font-family: "Nunito", serif;
    }
</style>

<h1>@ViewData["Title"]</h1>


<!-- Recipe creation form group -->
<form action="" method="post">
    <div class="form-group">
        <label asp-for="@Model.Recipe.Title" class="control-label">Recipe Title</label>
        <input asp-for="@Model.Recipe.Title" class="form-control" type="text" required>
    </div>
    <div class="form-group">
        <label asp-for="@Model.Recipe.Image" class="control-label">Image URL</label>
        <input asp-for="@Model.Recipe.Image" class="form-control" type="text" required>
    </div>
    <div class="form-group">
        <label asp-for="@Model.Recipe.Description" class="control-label">Description</label>
        <textarea asp-for="@Model.Recipe.Description" class="form-control" type="text" required></textarea>
    </div>
    <div class="form-group">
        <label asp-for="@Model.Recipe.Ingredients" class="control-label">Ingredients</label>
        <div style="max-height: 400px; overflow-y: auto;">
            <input id="ingr0" asp-for="@Model.Recipe.Ingredients[0]" class="form-control" required>
            <div id="btnIngrContainer" class="container-fluid">
                <div class="row justify-content-center">
                    <input id="addBtnIngr" class="btn btn-sm btn-success my-1" type="button" value="+ Add Ingredient">
                    <input id="deleteBtnIngr" class="btn btn-sm btn-danger my-1" type="button" value="- Remove Ingredient">
                </div>
            </div>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="@Model.Recipe.Instructions" class="control-label">Instructions</label>
        <div style="max-height: 400px; overflow-y: auto;">
            <input id="instr0" asp-for="@Model.Recipe.Instructions[0]" class="form-control" required>
            <div id="btnInstrContainer" class="container-fluid">
                <div class="row justify-content-center">
                    <input id="addBtnInstr" class="btn btn-sm btn-success my-1" type="button" value="+ Add Instruction">
                    <input id="deleteBtnInstr" class="btn btn-sm btn-danger my-1" type="button" value="- Remove Instruction">
                </div>
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>


@section Scripts {
    <script>
        // Reference for grabbing count of querySelectorAll result
        // https://stackoverflow.com/questions/6991494/javascript-getelementbyid-based-on-a-partial-string

        // Variables used across all input forms
        const textType = "text";
        const classType = "form-control";

        // Function prepared to listen to on-click events of the "+" button under the instructions
        // form group and add new instruction text areas for users to enter in their information
        const addInstrBtn = document.getElementById("addBtnInstr");
        addInstrBtn.addEventListener("click", function () {

            const btnInstrContainer = "btnInstrContainer";

            // Retrieve the previous input box to grab its array index
            var instrs = document.querySelectorAll('[id ^= "instr"]');
            var count = instrs.length;

            // Create new input element with same attributes as previous, but incremented index
            var nextTextInput = document.createElement("input");
            var nameAttr = "Recipe.Instructions[" + count + "]";
            var idAttr = "instr" + count;
            nextTextInput.setAttribute("id", idAttr);
            nextTextInput.setAttribute("class", classType);
            nextTextInput.setAttribute("required", "");
            nextTextInput.setAttribute("type", textType);
            nextTextInput.setAttribute("name", nameAttr);

            // Insert the new element before the button div in the form group
            const parentDiv = document.getElementById(btnInstrContainer).parentNode;
            const btnDiv = document.getElementById(btnInstrContainer);
            parentDiv.insertBefore(nextTextInput, btnDiv);
        });

        // Function prepared to listen to on-click events of the "+" button under the instructions
        // form group and add new instruction text areas for users to enter in their information
        const deleteInstrBtn = document.getElementById("deleteBtnInstr");
        deleteInstrBtn.addEventListener("click", function () {

            const deleteBtn = "deleteBtnInstr";
            var instrs = document.querySelectorAll('[id ^= "instr"]');
            var count = instrs.length;

            // Only allow deletion of the text input areas when count > 1
            if (count > 1) {
                var elemId = "instr" + (count - 1);
                var elemToRemove = document.getElementById(elemId);
                elemToRemove.remove();
            }

        });

        // Function prepared to listen to on-click events of the "+" button under the ingredients
        // form group and add new ingredients text areas for users to enter in their information
        const addIngrBtn = document.getElementById("addBtnIngr");
        addIngrBtn.addEventListener("click", function () {

            const btnIngrContainer = "btnIngrContainer";

            // Retrieve the previous input box to grab its array index
            var ingrs = document.querySelectorAll('[id ^= "ingr"]');
            var count = ingrs.length;

            // Create new input element with same attributes as previous, but incremented index
            var nextTextInput = document.createElement("input");
            var nameAttr = "Recipe.Ingredients[" + count + "]";
            var idAttr = "ingr" + count;
            nextTextInput.setAttribute("id", idAttr);
            nextTextInput.setAttribute("class", classType);
            nextTextInput.setAttribute("required", "");
            nextTextInput.setAttribute("type", textType);
            nextTextInput.setAttribute("name", nameAttr);

            // Insert the new element before the button div in the form group
            const parentDiv = document.getElementById(btnIngrContainer).parentNode;
            const btnDiv = document.getElementById(btnIngrContainer);
            parentDiv.insertBefore(nextTextInput, btnDiv);
        });

        // Function prepared to listen to on-click events of the "-" button under the ingredients
        // form group and remove ingredients text areas 
        const deleteIngrBtn = document.getElementById("deleteBtnIngr");
        deleteIngrBtn.addEventListener("click", function () {

            const deleteBtn = "deleteBtnIngr";
            var instrs = document.querySelectorAll('[id ^= "ingr"]');
            var count = instrs.length;

            // Only allow deletion of the text input areas when count > 1
            if (count > 1) {
                var elemId = "ingr" + (count - 1);
                var elemToRemove = document.getElementById(elemId);
                elemToRemove.remove();
            }
        });

    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
