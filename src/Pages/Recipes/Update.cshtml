@page "{id:int}"
@model ContosoCrafts.WebSite.Pages.Recipes.UpdateModel
@{
    ViewData["Title"] = "Update recipe page";
}

<h1>Update Recipe</h1>

<div class="container">
    <form id="update-form" method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        @Html.HiddenFor(r => r.Recipe.RecipeID)

        <div class="form-group">
            <label asp-for="@Model.Recipe.Title" class="control-label">Recipe Title</label>
            <input asp-for="@Model.Recipe.Title" class="form-control" required maxlength="100" minlength="1" />
            <span asp-validation-for="@Model.Recipe.Title" class="text-danger"></span>
        </div>

        <!-- Description form -->
        <div class="form-group">
            <label asp-for="@Model.Recipe.Description" class="control-label">Description</label>
            <textarea asp-for="@Model.Recipe.Description" class="form-control" type="text" required maxlength="1000" minlength="1"></textarea>
            <span id="description-error" class="text-danger"></span>
        </div>
       

        <div class="form-group">
            <label asp-for="@Model.Recipe.Image" class="control-label">Image URL</label>
            <input asp-for="@Model.Recipe.Image" class="form-control" required maxlength="1000" minlength="1" />
            <span asp-validation-for="@Model.Recipe.Image" class="text-danger"></span>
        </div>

        <!-- Tags creation form group -->
        <div class="form-group">
            <label asp-for="@Model.Recipe.Tags" class="control-label">Tags</label>
            <div style="max-height: 200px; overflow-y: auto;">
                @for (int i = 0; i < Model.Recipe.Tags.Length; i++)
                {
                    <input asp-for="@Model.Recipe.Tags[i]" class="form-control" id="tag-@(i+1)" required maxlength="1000" minlength="1" />
                    <span asp-validation-for="@Model.Recipe.Tags[i]" class="text-danger"></span>
                }
            </div>
            <div id="btnTagsContainer" class="container-fluid">
                <div class="row justify-content-left">
                    <input id="addBtnTags" class="btn btn-outline-success btn-sm" type="button" value="+ Tag">
                    <input id="deleteBtnTags" class="btn btn-outline-danger btn-sm" type="button" value="- Tag">
                </div>
            </div>
        </div>

        <!-- Ingredients creation form group -->
        <div class="form-group">
            <label asp-for="@Model.Recipe.Ingredients" class="control-label">Ingredients</label>
            @for (int i = 0; i < Model.Recipe.Ingredients.Length; i++)
            {
                <input asp-for="@Model.Recipe.Ingredients[i]" class="form-control" required maxlength="1000" minlength="1" />
                <span asp-validation-for="@Model.Recipe.Ingredients[i]" class="text-danger"></span>
            }
            <div id="btnIngrContainer" class="container-fluid">
                <div class="row justify-content-left">
                    <input id="addBtnIngr" class="btn btn-outline-success btn-sm" type="button" value="+ Ingredient">
                    <input id="deleteBtnIngr" class="btn btn-outline-danger btn-sm" type="button" value="- Ingredient">
                </div>
            </div>
        </div>

        <!-- Instructions creation form group -->
        <div class="form-group">
            <label asp-for="@Model.Recipe.Instructions" class="control-label">Instructions</label>
            @for (int i = 0; i < Model.Recipe.Instructions.Length; i++)
            {
                <div class="instrLabel-container">
                    <label class="instr-label">@($"{i + 1}.")</label>
                    <input asp-for="@Model.Recipe.Instructions[i]" class="form-control" required maxlength="1000" minlength="1" />
                    <span asp-validation-for="@Model.Recipe.Instructions[i]" class="text-danger"></span>
                </div>
            }

            <div id="btnInstrContainer" class="container-fluid">
                <div class="row justify-content-left">
                    <input id="addBtnInstr" class="btn btn-outline-success btn-sm" type="button" value="+ Instruction">
                    <input id="deleteBtnInstr" class="btn btn-outline-danger btn-sm" type="button" value="- Instruction">
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to update this recipe?')">Update</button>
    </form>
</div>


@section Scripts {
    
   <script>
        // Get the parent form element
        const formContainer = document.getElementById('update-form');

        // Add an event listener to the parent element for the 'input' and 'textarea' events
        formContainer.addEventListener('input', validateInput);
        formContainer.addEventListener('textarea', validateInput);

        // Respond to input and text area events to validate user input
        // client side and notify user of invalid input
        function validateInput(event) {
            const input = event.target;
            const span = input.nextElementSibling;

            if (input.checkValidity()) {
                span.textContent = '';
                span.className = 'text-danger';
            } else {
                span.textContent = input.validationMessage;
                span.className = 'text-danger visible';
            }
        }
    </script>   
    
    <script>
        // Update Confirmation
        function confirmUpdate()
        {
            var result = confirm("Are you sure you want to update this recipe?");
                if (result) {
                    document.getElementById("update-form").submit();
                }
        }
    </script>

    <script>
        // For Tags creation form group
        var tagCount = @Model.Recipe.Tags.Length;
        var tagContainer = $('#btnTagsContainer');
        var tagAddButton = $('#addBtnTags');
        var tagDeleteButton = $('#deleteBtnTags');

        // Add button to add tags
        tagAddButton.click(function () {
            var input = $('<input>').attr('type', 'text').attr('class', 'form-control').attr('name', 'Recipe.Tags[' + tagCount + ']').attr('required', '');
            if (tagCount > 0) {
                // Check if the previous tag input field is empty
                var prevInput = $('input[name="Recipe.Tags[' + (tagCount - 1) + ']"]');
                if (!prevInput.val()) {
                    alert('Tag cannot be empty. Please enter a valid tag.');
                    return; // do not proceed with adding the tag
                }
            }

            tagContainer.before(input);
            tagCount++;
        });

        // Delete button to delete tags
        tagDeleteButton.click(function () {
            var tagName = prompt("Enter the name of the tag you want to delete:");
            if (tagName) {
                // Get all the tag input fields
                var tagInputs = $('input[name^="Recipe.Tags"]');
                if (tagInputs.length > 1) {
                    var tagDeleted = false;
                    // Keep track of whether the specified tag was deleted
                    tagInputs.each(function (index) {
                        var tagInput = $(this);
                        if (tagInput.val() === tagName || tagInput.val() === "" ){
                            tagInput.remove();
                            tagDeleted = true;
                            tagCount--;
                            for (var i = index + 1; i < tagInputs.length; i++) {
                                var input = tagInputs.eq(i);
                                var newName = 'Recipe.Tags[' + (i - 1) + ']';
                                input.attr('name', newName);
                            }
                            return false; // break out of each loop
                        }
                    });

                    if (tagDeleted) {
                        var newTagArray = [];
                        tagInputs.each(function () {
                            var tagInput = $(this);
                            var tagValue = tagInput.val();
                            if (tagValue) {
                                newTagArray.push(tagValue);
                            }
                        });
                        $('#Tags').val(newTagArray.join(','));
                    } else {
                        alert('No matching tag is found.');
                    }
                } else {
                    alert('At least one tag is required.')
                }
            }
        });
    </script>

    <script>
        // For Ingredients creation form group
        var ingrCount = @Model.Recipe.Ingredients.Length;
        var ingrContainer = $('#btnIngrContainer');
        var ingrAddButton = $('#addBtnIngr');
        var ingrDeleteButton = $('#deleteBtnIngr');

        // Add button to add ingredients
        ingrAddButton.click(function () {
            var input = $('<input>').attr('type', 'text').attr('class', 'form-control').attr('name', 'Recipe.Ingredients[' + ingrCount + ']').attr('required', '');

            if (ingrCount > 0) {
                // Check if the previous tag input field is empty
                var prevInput = $('input[name="Recipe.Ingredients[' + (ingrCount - 1) + ']"]');
                if (!prevInput.val()) {
                    alert('Ingredient cannot be empty. Please enter a valid ingredient.');
                    return; // do not proceed with adding the ingredient
                }
            }
            ingrContainer.before(input);
            ingrCount++;
        });

        // Delete button to delete ingredients
        ingrDeleteButton.click(function () {
            var ingrName = prompt("Enter the name of the ingredient you want to delete:");
            if (ingrName) {
                // Get all the ingredient input fields
                var ingrInputs = $('input[name^="Recipe.Ingredients"]');
                if (ingrInputs.length > 1) {
                    var ingrDeleted = false;
                    // Keep track of whether the specified ingredient was deleted
                    ingrInputs.each(function (index) {
                        var ingrInput = $(this);
                        //if (ingrInput.val() === ingrName || ingrInput.val() === "") {
                        if (ingrInput.val() !== "" && ingrInput.val().toLowerCase().indexOf(ingrName.toLowerCase()) !== -1) {
                            ingrInput.remove();
                            ingrDeleted = true;
                            ingrCount--;
                            for (var i = index + 1; i < ingrInputs.length; i++) {
                                var input = ingrInputs.eq(i);
                                var newName = 'Recipe.Ingredients[' + (i - 1) + ']';
                                input.attr('name', newName);
                            }
                            return false; // break out of each loop
                        }
                    });

                    if (ingrDeleted) {
                        var newIngrArray = [];
                        ingrInputs.each(function () {
                            var ingrInput = $(this);
                            var ingrValue = ingrInput.val();
                            if (ingrValue) {
                                newIngrArray.push(ingrValue);
                            }
                        });
                        $('#Ingredients').val(newIngrArray.join(','));
                    } else {
                        alert('No matching ingredient is found.');
                    }
                } else {
                    alert('At least one ingredient is required.')
                }
            }
        });
    </script>

    <script>
        // For Instructions creation form group
        var instrCount = @Model.Recipe.Instructions.Length;
        var instrContainer = $('#btnInstrContainer');
        var instrAddButton = $('#addBtnInstr');
        var instrDeleteButton = $('#deleteBtnInstr');

        // Add button to add instructions
        instrAddButton.click(function () {
            // Check if the previous tag input field is empty
            var prevInput = $('input[name="Recipe.Instructions[' + (instrCount - 1) + ']"]');
            if (instrCount > 0 && !prevInput.val()) {
                alert('Instruction cannot be empty. Please enter a valid instruction.');
                return; // do not proceed with adding the instruction
            }

            var newInput = $('<input>').attr('type', 'text').attr('class', 'form-control').attr('name', 'Recipe.Instructions[' + instrCount + ']').attr('required', '');
            var newLabel = $('<label>').attr('class', 'instr-label').text(instrCount + 1 + '.');

            // Append a new div containing the label and input elements with the updated index
            var newDiv = $('<div>').addClass('instrLabel-container').append(newLabel).append(newInput);
            instrContainer.before(newDiv);
            instrCount++;
        });

        // Delete button to delete instructions
        instrDeleteButton.click(function () {
            var indexToDelete = prompt("Enter the index of the instruction you want to delete:");
            if (indexToDelete) {
                indexToDelete = parseInt(indexToDelete) - 1;
                // Get all the instruction input fields
                var instrInputs = $('input[name^="Recipe.Instructions"]');
                if (instrInputs.length > 1) {
                    var instrDeleted = false;
                    // Keep track of whether the specified instruction was deleted
                    instrInputs.each(function (index) {
                        var instrInput = $(this);
                        var instrLabel = instrInput.prev('label');

                        if (index === indexToDelete || (index === instrInputs.length - 1 && instrInput.val() === "")) {
                            instrInput.remove();
                            instrLabel.remove();    // remove the deleted instruction label
                            instrDeleted = true;
                            instrCount--;

                            for (var i = index + 1; i < instrInputs.length; i++) {
                                var input = instrInputs.eq(i);
                                var newName = 'Recipe.Instructions[' + (i - 1) + ']';
                                input.attr('name', newName);
                                // Keep updating the index label
                                input.prev('label').html(i + '.');

                            }
                            return false; // break out of each loop
                        }
                    });
                    if (instrDeleted) {
                        var newInstrArray = [];
                        instrInputs.each(function () {
                            var instrInput = $(this);
                            var instrValue = instrInput.val();
                            if (instrValue) {
                                newInstrArray.push(instrValue);
                            }
                        });
                        $('#Instructions').val(newInstrArray.join('\n'));
                    } else {
                        alert('Invalid instruction index.');
                    }
                } else {
                    alert('At least one instruction is required.')
                }
            }
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}