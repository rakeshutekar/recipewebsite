@using Microsoft.AspNetCore.Components
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@inject JsonFileRecipeService RecipeService
@inject NavigationManager NavigationManager


<div>
    <div>
        @foreach (var reaction in Reactions)
        {
            // Prepare reaction information to display
            var ordinal = (int)reaction.Item1;
            string emojiVal = "&#" + Recipe.ReactionCharacters[reaction.Item1].ToString() + ";";

            // Use the MarkUp String class to output the HTML content
            <button class="btn btn-info mx-1" id="@ordinal" @onclick="(e => SubmitReaction(ordinal))" title="@reaction.Item1 Reaction">
                @((MarkupString)emojiVal) @reaction.Item2
            </button>
        }
    </div>
</div>

@code {
    // The RecipeID of the current page
    [Parameter]
    public int RecipeID { get; set; }

    // The RecipeModel for the reactions to be shown
    public RecipeModel Recipe { get; set; }

    // The list of reaction values grabbed from the database
    List<(Reaction, int)> Reactions { get; set; }

    /// <summary>
    /// Initializes the blazor component on the first page load
    /// </summary>
    protected override void OnInitialized()
    {
        // Get the Reactions based on recipeId/Recipe on page load
        Recipe = RecipeService.GetRecipe(RecipeID);
        Reactions = Recipe.GetReactions();
    }

    /// <summary>
    /// Submits the reaction to the database
    /// </summary>
    void SubmitReaction(int reactionOrdinalVal)
    {
        // Cast the ordinal value to enum Reaction type
        var reactionType = (Reaction)reactionOrdinalVal;

        RecipeService.AddReaction(Recipe.RecipeID, reactionType);
        Recipe = RecipeService.GetRecipe(RecipeID);
        Reactions = Recipe.GetReactions();
  
        // Ensure that the state is udpated and counts are refreshed
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}

